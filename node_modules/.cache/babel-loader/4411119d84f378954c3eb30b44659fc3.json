{"ast":null,"code":"export function capitalizeFLetter() {\n  let string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return string && string[0].toUpperCase() + string.slice(1);\n} // export const sortObjectArrayAsc =\n//   (key: string | number) =>\n//   (\n//     a: { [x: string]: { toLowerCase: () => number } },\n//     b: { [x: string]: { toLowerCase: () => number } }\n//   ): number =>\n//     a[key].toLowerCase() > b[key].toLowerCase() ? 1 : -1; // usecase string.sort(sortArray(\"name\")) where name is the key to sort\n// export const sortObjectArrayDec =\n//   (key: string) =>\n//   (\n//     a: { [x: string]: { toLowerCase: () => number } },\n//     b: { [x: string]: { toLowerCase: () => number } }\n//   ): number =>\n//     b[key].toLowerCase() > a[key].toLowerCase() ? 1 : -1; // usecase string.sort(sortArray(\"name\")) where name is the key to sort\n\nexport const sortObjectArrayAsc = key => (a, b) => a[key].localeCompare(b[key]);\nexport const sortObjectArrayDesc = key => (a, b) => b[key].localeCompare(a[key]);\nexport const sortNumberAsc = key => (a, b) => a[key] - b[key];\nexport const sortNumberDesc = key => (a, b) => b[key] - a[key];\nexport const sortObjectItem = (key, order, type) => {\n  if (type === 'object' && order === 'asc') return sortObjectArrayAsc(key);\n  if (type === 'object' && order === 'desc') return sortObjectArrayDesc(key);\n  if (type === 'number' && order === 'asc') return sortNumberAsc(key);\n  if (type === 'number' && order === 'desc') return sortNumberDesc(key);\n}; //Loadin State Helper Functio\n\nexport const removeLoadingState = (loading, type) => {\n  return loading.filter(l => !l.includes(type));\n};\nexport const getLoadingState = (loading, type) => {\n  return loading.includes(type);\n};","map":{"version":3,"sources":["/Users/mac/Documents/junicodes/test/2021-senior-frontend-developer-mlybfy/src/helpers/supportFunctions.ts"],"names":["capitalizeFLetter","string","toUpperCase","slice","sortObjectArrayAsc","key","a","b","localeCompare","sortObjectArrayDesc","sortNumberAsc","sortNumberDesc","sortObjectItem","order","type","removeLoadingState","loading","filter","l","includes","getLoadingState"],"mappings":"AAAA,OAAO,SAASA,iBAAT,GAAsD;AAAA,MAA3BC,MAA2B,uEAAZ,EAAY;AAC3D,SAAOA,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAN,CAAUC,WAAV,KAA0BD,MAAM,CAACE,KAAP,CAAa,CAAb,CAA3C;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,kBAAkB,GAAIC,GAAD,IAAiB,CAACC,CAAD,EAAQC,CAAR,KAAmBD,CAAC,CAACD,GAAD,CAAD,CAAOG,aAAP,CAAqBD,CAAC,CAACF,GAAD,CAAtB,CAA/D;AACP,OAAO,MAAMI,mBAAmB,GAAIJ,GAAD,IAAiB,CAACC,CAAD,EAAQC,CAAR,KAAmBA,CAAC,CAACF,GAAD,CAAD,CAAOG,aAAP,CAAqBF,CAAC,CAACD,GAAD,CAAtB,CAAhE;AAEP,OAAO,MAAMK,aAAa,GAAIL,GAAD,IAAiB,CAACC,CAAD,EAASC,CAAT,KAAoBD,CAAC,CAACD,GAAD,CAAD,GAAUE,CAAC,CAACF,GAAD,CAAtE;AACP,OAAO,MAAMM,cAAc,GAAIN,GAAD,IAAiB,CAACC,CAAD,EAASC,CAAT,KAAoBA,CAAC,CAACF,GAAD,CAAD,GAAUC,CAAC,CAACD,GAAD,CAAvE;AAEP,OAAO,MAAMO,cAAc,GAAG,CAACP,GAAD,EAAcQ,KAAd,EAA6BC,IAA7B,KAA8C;AACxE,MAAGA,IAAI,KAAK,QAAT,IAAqBD,KAAK,KAAK,KAAlC,EAAyC,OAAOT,kBAAkB,CAACC,GAAD,CAAzB;AACzC,MAAGS,IAAI,KAAK,QAAT,IAAqBD,KAAK,KAAK,MAAlC,EAA0C,OAAOJ,mBAAmB,CAACJ,GAAD,CAA1B;AAC1C,MAAGS,IAAI,KAAK,QAAT,IAAqBD,KAAK,KAAK,KAAlC,EAAyC,OAAOH,aAAa,CAACL,GAAD,CAApB;AACzC,MAAGS,IAAI,KAAK,QAAT,IAAqBD,KAAK,KAAK,MAAlC,EAA0C,OAAOF,cAAc,CAACN,GAAD,CAArB;AAC7C,CALM,C,CAOP;;AACA,OAAO,MAAMU,kBAAkB,GAAG,CAChCC,OADgC,EAEhCF,IAFgC,KAGnB;AACb,SAAOE,OAAO,CAACC,MAAR,CAAgBC,CAAD,IAAO,CAACA,CAAC,CAACC,QAAF,CAAWL,IAAX,CAAvB,CAAP;AACD,CALM;AAOP,OAAO,MAAMM,eAAe,GAAG,CAACJ,OAAD,EAAoBF,IAApB,KAA8C;AAC3E,SAAOE,OAAO,CAACG,QAAR,CAAiBL,IAAjB,CAAP;AACD,CAFM","sourcesContent":["export function capitalizeFLetter(string: string=\"\"): string {\n  return string && string[0].toUpperCase() + string.slice(1);\n}\n\n// export const sortObjectArrayAsc =\n//   (key: string | number) =>\n//   (\n//     a: { [x: string]: { toLowerCase: () => number } },\n//     b: { [x: string]: { toLowerCase: () => number } }\n//   ): number =>\n//     a[key].toLowerCase() > b[key].toLowerCase() ? 1 : -1; // usecase string.sort(sortArray(\"name\")) where name is the key to sort\n\n// export const sortObjectArrayDec =\n//   (key: string) =>\n//   (\n//     a: { [x: string]: { toLowerCase: () => number } },\n//     b: { [x: string]: { toLowerCase: () => number } }\n//   ): number =>\n//     b[key].toLowerCase() > a[key].toLowerCase() ? 1 : -1; // usecase string.sort(sortArray(\"name\")) where name is the key to sort\n\nexport const sortObjectArrayAsc = (key: string) => (a:any, b: any) => a[key].localeCompare(b[key]);\nexport const sortObjectArrayDesc = (key: string) => (a:any, b: any) => b[key].localeCompare(a[key]);\n\nexport const sortNumberAsc = (key: string) => (a: any, b: any) => a[key] -  b[key];\nexport const sortNumberDesc = (key: string) => (a: any, b: any) => b[key] -  a[key];\n\nexport const sortObjectItem = (key: string, order: string, type: string) => {\n    if(type === 'object' && order === 'asc') return sortObjectArrayAsc(key);\n    if(type === 'object' && order === 'desc') return sortObjectArrayDesc(key);\n    if(type === 'number' && order === 'asc') return sortNumberAsc(key);\n    if(type === 'number' && order === 'desc') return sortNumberDesc(key);\n}\n\n//Loadin State Helper Functio\nexport const removeLoadingState = (\n  loading: string[],\n  type: string\n): string[] => {\n  return loading.filter((l) => !l.includes(type));\n};\n\nexport const getLoadingState = (loading: string[], type: string): boolean => {\n  return loading.includes(type);\n};\n"]},"metadata":{},"sourceType":"module"}